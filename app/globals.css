@tailwind base;
@tailwind components;
@tailwind utilities;


.ProseMirror-separator {
    display: none;
}

.details>button::before {
    content: '\25B6';
    display: flex;
    justify-content: center;
    align-items: center;
    width: 0.5em;
    height: 0.5em;
}

@layer components {
    .bg-circles {
        background-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 200'><circle cx='100' cy='100' r='100' fill='transparent' stroke='white' /><circle cx='100' cy='100' r='75' fill='transparent' stroke='white'/><circle cx='100' cy='100' r='50' fill='transparent' stroke='white'/><circle cx='100' cy='100' r='25' fill='transparent' stroke='white'/></svg>");
        background-repeat: no-repeat;
        background-position: top -130px right -130px;
        background-size: 250px;
        opacity: 0.1;
    }
}

.drag-handle {
    position: fixed;
    opacity: 1;
    transition: opacity ease-in 0.2s;
    border-radius: 0.25rem;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 10 10' style='fill: rgba(255, 255, 255, 0.5)'%3E%3Cpath d='M3,2 C2.44771525,2 2,1.55228475 2,1 C2,0.44771525 2.44771525,0 3,0 C3.55228475,0 4,0.44771525 4,1 C4,1.55228475 3.55228475,2 3,2 Z M3,6 C2.44771525,6 2,5.55228475 2,5 C2,4.44771525 2.44771525,4 3,4 C3.55228475,4 4,4.44771525 4,5 C4,5.55228475 3.55228475,6 3,6 Z M3,10 C2.44771525,10 2,9.55228475 2,9 C2,8.44771525 2.44771525,8 3,8 C3.55228475,8 4,8.44771525 4,9 C4,9.55228475 3.55228475,10 3,10 Z M7,2 C6.44771525,2 6,1.55228475 6,1 C6,0.44771525 6.44771525,0 7,0 C7.55228475,0 8,0.44771525 8,1 C8,1.55228475 7.55228475,2 7,2 Z M7,6 C6.44771525,6 6,5.55228475 6,5 C6,4.44771525 6.44771525,4 7,4 C7.55228475,4 8,4.44771525 8,5 C8,5.55228475 7.55228475,6 7,6 Z M7,10 C6.44771525,10 6,9.55228475 6,9 C6,8.44771525 6.44771525,8 7,8 C7.55228475,8 8,8.44771525 8,9 C8,9.55228475 7.55228475,10 7,10 Z'%3E%3C/path%3E%3C/svg%3E");
    background-size: calc(0.5em + 0.375rem) calc(0.5em + 0.375rem);
    background-repeat: no-repeat;
    background-position: center;
    width: 1.4rem;
    height: 1.4rem;
    z-index: 50;
    cursor: grab;

    &:hover {
        background-color: #3f3f46;
        transition: background-color 0.2s;
    }

    &:active {
        cursor: grabbing;
    }

    &.hide {
        opacity: 1;
        pointer-events: none;
    }

    @media screen and (max-width: 600px) {
        display: none;
        pointer-events: none;
    }
}

p:has(span.node-custom-badges) {
    text-align: center;
}

.lucide {
    stroke-width: 1.5px;
}

.slash-command {
    [cmdk-group-heading] {
        user-select: none;
        font-size: 12px;
        color: #6f6f6f;
        padding: 0px 10px;
        display: flex;
        align-items: center;
    }

    [cmdk-input-wrapper] {
        display: none;
    }
}

/* Syntax highlighter */

pre {
    background-color: #0d1117 !important;
    border: 1px solid rgba(128, 128, 128, .1)
}

pre code.hljs {
    display: block;
    overflow-x: auto;
    padding: 1em;
}

code.hljs {
    padding: 3px 5px;
}

.hljs {
    color: #c9d1d9;
}

.hljs-doctag,
.hljs-keyword,
.hljs-meta .hljs-keyword,
.hljs-template-tag,
.hljs-template-variable,
.hljs-type,
.hljs-variable.language_ {
    color: #ff7b72;
}

.hljs-title,
.hljs-title.class_,
.hljs-title.class_.inherited__,
.hljs-title.function_ {
    color: #d2a8ff;
}

.hljs-attr,
.hljs-attribute,
.hljs-literal,
.hljs-meta,
.hljs-number,
.hljs-operator,
.hljs-selector-attr,
.hljs-selector-class,
.hljs-selector-id,
.hljs-variable {
    color: #79c0ff;
}

.hljs-meta .hljs-string,
.hljs-regexp,
.hljs-string {
    color: #a5d6ff;
}

.hljs-built_in,
.hljs-symbol {
    color: #ffa657;
}

.hljs-code,
.hljs-comment,
.hljs-formula {
    color: #8b949e;
}

.hljs-name,
.hljs-quote,
.hljs-selector-pseudo,
.hljs-selector-tag {
    color: #7ee787;
}

.hljs-subst {
    color: #c9d1d9;
}

.hljs-section {
    color: #1f6feb;
    font-weight: 700;
}

.hljs-bullet {
    color: #f2cc60;
}

.hljs-emphasis {
    color: #c9d1d9;
    font-style: italic;
}

.hljs-strong {
    color: #c9d1d9;
    font-weight: 700;
}

.hljs-addition {
    color: #aff5b4;
    background-color: #033a16;
}

.hljs-deletion {
    color: #ffdcd7;
    background-color: #67060c;
}

/* CSS for tiptap placeholder */
.tiptap p.is-empty::before {
    color: #56595c;
    content: attr(data-placeholder);
    float: left;
    height: 0;
    pointer-events: none;
}

/* CSS for custom TODO styles â€“ shoutout to this awesome tutorial: https://moderncss.dev/pure-css-custom-checkbox-style/ */
ul[data-type="taskList"] li>label {
    margin-right: 0.2rem;
    user-select: none;
}

@media screen and (max-width: 768px) {
    ul[data-type="taskList"] li>label {
        margin-right: 0.5rem;
    }
}

ul[data-type="taskList"] li>label input[type="checkbox"] {
    -webkit-appearance: none;
    appearance: none;
    background-color: #fff;
    margin: 0;
    cursor: pointer;
    width: 1.1em;
    height: 1.1em;
    position: relative;
    top: 5px;
    border: 1px solid #1c1917;
    margin-right: 0.3rem;
    display: grid;
    place-content: center;

    &:hover {
        background-color: #f5f5f4;
    }

    &:active {
        background-color: #e7e5e4;
    }

    &::before {
        content: "";
        width: 0.65em;
        height: 0.65em;
        transform: scale(0);
        transition: 120ms transform ease-in-out;
        box-shadow: inset 1em 1em #1c1917;
        transform-origin: center;
        clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
    }

    &:checked::before {
        transform: scale(1);
    }
}

ul[data-type="taskList"] li[data-checked="true"]>div>p {
    color: #a8a29e;
    text-decoration: line-through;
    text-decoration-thickness: 2px;
}


@media (prefers-reduced-motion: no-preference) {
    .wrapper {
        animation: growAndShrink 700ms forwards;
    }
}

@keyframes growAndShrink {
    0% {
        transform: scale(0);
    }

    50% {
        transform: scale(1);
    }

    100% {
        transform: scale(0);
    }
}

@media (prefers-reduced-motion: no-preference) {
    .sparkle {
        animation: spin 1000ms linear;
    }
}

@keyframes spin {
    from {
        transform: rotate(0deg);
    }

    to {
        transform: rotate(180deg);
    }
}